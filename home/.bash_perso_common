# .bash_perso to include into your .bashrc
# 
# Last review on 08.01.2014
# Personal .bashrc

# Source global definitions
# -------------------------

if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# [Script by Emmanuel Rouat - modified by $USER ]
# Automatic setting of $DISPLAY (if not set already).
# This works for linux - your mileage may vary. ... 
# The problem is that different types of terminals give
# different answers to 'who am i' (rxvt in particular can be
# troublesome).
# I have not found a 'universal' method yet.
#-------------------------------------------------------------

function get_xserver ()
{
    case $TERM in
       xterm )
            #XSERVER=$(who am i | awk '{print $NF}' | tr -d ')''(' ) 
            # Ane-Pieter Wieringa suggests the following alternative:
            # I_AM=$(who am i)
            # SERVER=${I_AM#*(}
            # SERVER=${SERVER%*)}

            # XSERVER=${XSERVER%%:*}
	    I_AM=`who am i`
	    XSERVER=`who am i | cut -d "(" -f 2 | cut -d ")" -f 1`
            ;;
        aterm | rxvt)
			# Find some code that works here. ...
            ;;
    esac  
}

# Warning : do NOT make what you want with the DISPLAY variable !
if [ -z ${DISPLAY:=""} ]; then
    get_xserver
    if [[ -z ${XSERVER}  || ${XSERVER} == $(hostname) || \
      ${XSERVER} == "unix" || ${XSERVER} == ":0.0" ]]; then 
        DISPLAY=":0.0"          # Display on local host.
    else
        DISPLAY=${XSERVER}:0.0  # Display on remote host.
    fi
fi

export DISPLAY


# Some settings
#--------------

# ulimit -S -c 0          # Don't want any coredumps.
# set -o notify
# set -o noclobber
# set -o ignoreeof
# set -o nounset
#set -o xtrace            # Useful for debuging.

# Enable options:
# shopt -s cdspell
# shopt -s cdable_vars
# shopt -s checkhash
# shopt -s checkwinsize
# shopt -s sourcepath
# shopt -s no_empty_cmd_completion
# shopt -s cmdhist
# shopt -s histappend histreedit histverify
# shopt -s extglob        # Necessary for programmable completion.

# Disable options:
# shopt -u mailwarn
# unset MAILCHECK         # Don't want my shell to warn me of incoming mail.


# export TIMEFORMAT=$'\nreal %3R\tuser %3U\tsys %3S\tpcpu %P\n'
# export HISTTIMEFORMAT="%H:%M > "
# export HISTIGNORE="&:bg:fg:ll:h"
# export HOSTFILE=$HOME/.hosts    # Put list of remote hosts in ~/.hosts ...


# Greeting, motd (msg of the day) etc...
#---------------------------------------

# Define some colors first:
red='\e[0;31m'
RED='\e[1;31m'
blue='\e[0;34m'
BLUE='\e[1;34m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
NC='\e[0m'              # No Color
# --> Nice. Has the same effect as using "ansi.sys" in DOS.

# Looks best on a terminal with black background.....
# echo -e "${CYAN}This is BASH ${RED}${BASH_VERSION%.*}\
# ${CYAN} - DISPLAY on ${RED}$DISPLAY${NC}\n"
echo -e "${CYAN}Welcome on BASH ${RED}${BASH_VERSION%.*}\
# ${CYAN}- You're ${BLUE}$USER${CYAN} on ${RED}$DISPLAY${NC}"
uptime | cut -d " " -f 3-
date
if [ -x /usr/games/fortune ]; then
    fort_dir=/usr/share/games/fortunes
    fort_lang=$(echo $fort_dir/fr $fort_dir/de $fort_dir/es $fort_dir/it $fort_dir/ru $fort_dir/)
    # fort_lang=$(echo $fort_dir/)
    /usr/games/fortune -s $fort_lang  # Makes our day a bit more fun.... :-)
fi

function _exit()        # Function to run upon exit of shell.
{
    echo -e "${RED}Hasta la vista, baby${NC}"
	sleep 0.3
}
trap _exit EXIT


# Shell Prompt
#-------------------------------------------------------------

TIMETOSLEEP=22     # just to remind you have to sleep ;0
TIMETOWAKEUP=6     # ... and wake up

if [[ "${DISPLAY%%:0*}" != "" ]]; then  
    HILIT=${red}   # remote machine: prompt will be partly red
else
    HILIT=${cyan}  # local machine: prompt will be partly cyan
fi

#  --> Replace instances of \W with \w in prompt functions below
#+ --> to get display of full path name.

function fastprompt()
{
    unset PROMPT_COMMAND
    case $TERM in
        *term | rxvt )
            PS1="${HILIT}[\h]$NC \W > \[\033]0;\${TERM} [\u@\h] \w\007\]" ;;
        linux )
            PS1="${HILIT}[\h]$NC \W > " ;;
        *)
            PS1="[\h] \W > " ;;
    esac
}


_powerprompt()
{
    LOAD=$(uptime|sed -e "s/.*: \([^,]*\).*/\1/" -e "s/ //g")
}

function powerprompt()
{
	# CURTIME must be a number, not a string !!!
	#CURTIME=`date |cut -d " " -f 4 | cut -d ":" -f 1 2> /dev/null`
	#if [ $CURTIME -ge $TIMETOSLEEP ] || [ $CURTIME -lt $TIMETOWAKEUP ]
	#then
	#	SLEEPMSG=" Il est temps de dormir..."
	#else
	#	SLEEPMSG=""
	#fi

    PROMPT_COMMAND=_powerprompt
    case $TERM in
        *term | rxvt  )
            PS1="${HILIT}[\A${SLEEPMSG} - \$LOAD]$NC\n[\u@\h \#] \W > " ;; #\
                # \[\033]0;\${TERM} [\u@\h] \w\007\]" ;;
        linux )
            PS1="${HILIT}[\A${SLEEPMSG} - \$LOAD]$NC\n[\u@\h \#] \W > " ;;
        * )
            PS1="[\A - \$LOAD]\n[\u@\h \#] \W > " ;;
    esac
}

powerprompt     # This is the default prompt -- might be slow.
                # If too slow, use fastprompt instead. ...
				

#===============================================================
#
# ALIASES AND FUNCTIONS
#
# Many functions were taken (almost) straight from the bash-2.04
# examples. [Emmanuel Rouat]
#
#===============================================================

# User specific aliases and functions
# -----------------------------------

# Commons
alias lls='ls -larth --color'
alias l=lls
alias lld="ls -lArth --group-directories-first"
#alias ls='ls -hF --color'  # add colors for filetype recognition
alias la='ls -Al'          # show hidden files
alias lx='ls -lXB'         # sort by extension
alias lk='ls -lSr'         # sort by size, biggest last
alias lc='ls -ltcr'        # sort by and show change time, most recent last
alias lu='ls -ltur'        # sort by and show access time, most recent last
# alias lt='ls -ltr'         # sort by date, most recent last
alias lm='ls -larth --color | more'    # pipe through 'more' (less doesn't like colors !)
alias lr='ls -lAR'          # recursive ls
alias tree='tree -Csu'     # nice alternative to 'recursive ls'

alias rm='rm -i --preserve-root'
alias rmf='rm -f --preserve-root'
alias clean='rm *~'
alias ..='cd ..'
alias h='history'
alias j='jobs -l'

alias pf='ps -eF'
alias pt='ps -eFH'
alias pu='ps -F -u $USER'

alias apts='apt-cache search'
alias apti='sudo apt-get install'

alias bye='exit' 
alias q='exit'

# Programs
alias gcc='gcc -Wall -pedantic'
alias gccs='gcc -Wall -pedantic -std=c99'
alias emacsnw='emacs -nw'
#alias python='/home/$USER/Python-3.1.2/python'
alias gfortran='gfortran -Wall -fimplicit-none'
alias wget_website='wget --recursive --no-clobber --page-requisites --html-extension --convert-links --restrict-file-names=windows --no-parent'
# --domains website.org \

# Personal Programs
# None

# File & string-related functions
# -------------------------------

# Find a file with a pattern in name:
function ff() { find . -type f -iname '*'$*'*' -ls ; }

# Find a file with pattern $1 in name and Execute $2 on it:
function fe()
{ find . -type f -iname '*'${1:-}'*' -exec ${2:-file} {} \;  ; }

# Find a pattern in a set of files and highlight them:
# (needs a recent version of egrep)
function fstr()
{
    OPTIND=1
    local case=""
    local usage="fstr: find string in files.
Usage: fstr [-i] \"pattern\" [\"filename pattern\"] "
    while getopts :it opt
    do
        case "$opt" in
        i) case="-i " ;;
        *) echo "$usage"; return;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    if [ "$#" -lt 1 ]; then
        echo "$usage"
        return;
    fi
    find . -type f -name "${2:-*}" -print0 | \
    xargs -0 egrep --color=always -sn ${case} "$1" 2>&- | more 

}

function cuttail() # cut last n lines in file, 10 by default
{
    nlines=${2:-10}
    sed -n -e :a -e "1,${nlines}!{P;N;D;};N;ba" $1
}

function lowercase()  # move filenames to lowercase
{
    for file ; do
        filename=${file##*/}
        case "$filename" in
        */*) dirname==${file%/*} ;;
        *) dirname=.;;
        esac
        nf=$(echo $filename | tr A-Z a-z)
        newname="${dirname}/${nf}"
        if [ "$nf" != "$filename" ]; then
            mv "$file" "$newname"
            echo "lowercase: $file --> $newname"
        else
            echo "lowercase: $file not changed."
        fi
    done
}


function swap()  # Swap 2 filenames around, if they exist
{                #(from Uzi's bashrc).
    local TMPFILE=tmp.$$ 

    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
    [ ! -e $2 ] && echo "swap: $2 does not exist" && return 1

    mv "$1" $TMPFILE 
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

function extract()      # Handy Extract Program.
{
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xvjf $1     ;;
             *.tar.gz)    tar xvzf $1     ;;
             *.bz2)       bunzip2 $1      ;;
             *.rar)       unrar x $1      ;;
             *.gz)        gunzip $1       ;;
             *.tar)       tar xvf $1      ;;
             *.tbz2)      tar xvjf $1     ;;
             *.tgz)       tar xvzf $1     ;;
             *.zip)       unzip $1        ;;
             *.Z)         uncompress $1   ;;
             *.7z)        7z x $1         ;;
             *)           echo "'$1' cannot be extracted via >extract<" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}


# Process/system related functions
# --------------------------------

function my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ; }
function pp() { my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"} ; }

function killps()                 # Kill by process name.
{
    local pid pname sig="-TERM"   # Default signal.
    if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
        echo "Usage: killps [-SIGNAL] pattern"
        return;
    fi
    if [ $# = 2 ]; then sig=$1 ; fi
    for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} ) ; do
        pname=$(my_ps | awk '$1~var { print $5 }' var=$pid )
        if ask "Kill process $pid <$pname> with signal $sig?"
            then kill $sig $pid
        fi
    done
}

function my_ip() # Get IP adresses.
{
    MY_IP=$(/sbin/ifconfig eth0 | awk '/inet adr/ { print $2 } ' | \
sed -e s/adr://)
    MY_ISP=$(/sbin/ifconfig eth0 | awk '/P-t-P/ { print $3 } ' | \
sed -e s/P-t-P://)
    echo $MY_IP
}

function ii()   # Get current host related info.
{
    echo -e "\nYou are logged on ${RED}$HOST"
    echo -e "\nAdditionnal information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date :$NC " ; date
    echo -e "\n${RED}Machine stats :$NC " ; uptime
    echo -e "\n${RED}Memory stats :$NC " ; free
    my_ip 2>&- ;
    echo -e "\n${RED}Local IP Address :$NC" ; echo ${MY_IP:-"Not connected on eth0"}
    echo -e "\n${RED}ISP Address :$NC" ; echo ${MY_ISP:-"Not connected on eth0"}
    echo -e "\n${RED}Open connections :$NC "; netstat -pan --inet;
    echo
}


# Misc utilities
# --------------

function repeat()       # Repeat n times command.
{
    local i max
    max=$1; shift;
    for ((i=1; i <= max ; i++)); do  # --> C-like syntax
        eval "$@";
    done
}


function ask()          # See 'killps' for example of use.
{
    echo -n "$@" '[y/n] ' ; read ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

function corename()   # Get name of app that created a corefile.
{ 
    for file ; do
        echo -n $file : ; gdb --core=$file --batch | head -1
    done 
}

bind '\C-d:menu-complete'

# PATH=/home/$USER/GMTdev/gmt4/bin:$PATH
export PATH=/home/$USER/GMT4.5.9/bin:$PATH
export NETCDFHOME=/usr

# Perso user+host-specific
userhost="$(whoami)@$(hostname)"
if [ -f ~/.bash_perso_$userhost ]; then
    . ~/.bash_perso_$userhost
fi

# Local Variables:
# mode:shell-script
# sh-shell:bash
# End:
